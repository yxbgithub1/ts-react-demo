@import '../lib/function';
/*************************
 border
**************************/
$palette:(
    // c1:#eeeeee,
    c1:#EAEBF0,
    c2:#e1e1e1,
);
$alias:('row','col','top','left','bottom','right','');
$c1:map-get($palette, c1);


@mixin hairline($dir, $color: #d3d2d2){
    $dprs:(1.5,2,3,4);
    &::before,
    &::after{
        z-index         : 100;
        top             : 0;
        left            : 0;
        content         : '';
        position        : absolute; 
        background-color: $color;
    }

    @if $dir == 'top' or $dir == 'bottom'{
        &::before{
            width           : 100%;
            height          : 1px;
            transform-origin: 50% 0%;    
            @for $i from 1 through length($dprs){
                $dpr:nth($dprs,$i);
                @media only screen and (-webkit-min-device-pixel-ratio: $dpr),(min-device-pixel-ratio: $dpr) {
                     transform        : scaleY(1/$dpr);
                     -webkit-transform: scaleY(1/$dpr);
                }
            }
            @if $dir == 'bottom'{
                top             : auto !important;
                bottom          : 0;
                transform-origin: 50% 100%;
            }
        }
    }
    @else if $dir == 'left' or $dir == 'right'{
        &::after{
            width           : 1px;
            height          : 100%;
            transform-origin: 0 50%;
            @for $i from 1 through length($dprs){
                $dpr:nth($dprs,$i);
                @media only screen and (-webkit-min-device-pixel-ratio: $dpr),(min-device-pixel-ratio: $dpr) {
                     transform        : scaleX(1/$dpr);
                     -webkit-transform: scaleX(1/$dpr);
                }
            }
            @if $dir == 'right'{  
                left            : auto !important;
                right           : 0;
                transform-origin: 100% 50%;
            }
        }
    }
};

@mixin create-border(){
    $direction:(top, left, bottom, right);
    .border{
        position: relative;
        @for $i from 1 through length($direction){
            $dir:nth($direction, $i);
            &.#{$dir}{
                @include hairline($dir);
            }
        };
    }
}

/*************************
 border-radius
**************************/
$multiple: 1;
.border{
    @for $i from 1 through 20 {
        &.radius#{$i}{
            border-radius: rem($i * $multiple);
        }
    }
};

/*************************
 margin && padding
**************************/
@mixin boxModel($step:5){
    @for $i from 1 through 15{
        $number: $step   * $i;
        $var   : rem($number * 1);
        @for $j from 1 through length($alias){
            $dir:nth($alias,$j);
            @if $dir == 'row'{
                .mg-#{$dir}#{$number}{
                    margin-top: $var;
                    margin-bottom: $var;
                }
                .pg-#{$dir}#{$number}{
                    padding-top: $var;
                    padding-bottom: $var;
                }
            }
            @else if $dir == 'col'{
                .mg-#{$dir}#{$number}{
                    margin-left: $var;
                    margin-right: $var;
                }
                .pg-#{$dir}#{$number}{
                    padding-left: $var;
                    padding-right: $var;
                }
            }
            @else if $dir == 'top' or $dir == 'left' or $dir == 'bottom' or $dir == 'right' {
                .mg-#{$dir}#{$number}{
                    margin-#{$dir}:$var;
                }
                .pg-#{$dir}#{$number} {
                    padding-#{$dir}:$var;
                }
            }
            @else{
                .mg#{$number}{
                    margin:$var;
                }
                .pg#{$number}{
                    padding:$var;
                }
            }
        }
    }
};
@include boxModel();

/*************************
 content
**************************/
@mixin widths($column: 12) {
    $col: 100 / $column;
    @for $i from 1 through $column {
        $width:percentage($col * $i / 100);
        @if $i < 10{
            .u#{$i} {
                width: $width;
            }
        }@else{
            $x: str-slice('#{$i}',2, 3);
            .u1#{$x} {
                 width: $width;
            }
        }
    }
}
@include widths();

/*************************
 float
**************************/
.ft-l{
    float: left;
}
.ft-r{
    float: right;
}